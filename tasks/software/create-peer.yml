#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Register the user for the peer
  include_tasks: register-user.yml
  vars:
    protocol: "{{ ibp[organization.ca.id].protocol }}"
    hostname: "{{ ibp[organization.ca.id].hostname }}"
    port: "{{ ibp[organization.ca.id].port }}"
    caname: "{{ ibp[organization.ca.id].caname }}"
    identity: "{{ peer.identity }}"
    secret: "{{ peer.secret }}"
    type: peer
    registrar: "{{ organization.ca.admin_identity }}"

- name: Register the TLS user for the peer
  include_tasks: register-tls-user.yml
  vars:
    protocol: "{{ ibp[organization.ca.id].protocol }}"
    hostname: "{{ ibp[organization.ca.id].hostname }}"
    port: "{{ ibp[organization.ca.id].port }}"
    caname: "{{ ibp[organization.ca.id].tlscaname }}"
    identity: "{{ peer.tls.identity }}"
    secret: "{{ peer.tls.secret }}"
    type: peer
    registrar: "{{ organization.ca.admin_identity }}"
  when: peer.tls.enabled

- name: Get the list of components
  uri:
    url: "{{ infrastructure.software.api_endpoint }}/ak/api/v1/components?skip_cache=yes"
    url_username: "{{ infrastructure.software.api_key }}"
    url_password: "{{ infrastructure.software.api_secret }}"
    method: GET
    return_content: yes
    validate_certs: no
  register: ibp_components

- name: Check for peer
  set_fact:
    ibp_peer_count: "{{
      ibp_components.json |
      selectattr('display_name', 'defined') |
      selectattr('display_name', 'eq', peer.ibp.display_name) |
      list
    }}"

- name: Create peer
  uri:
    url: "{{ infrastructure.software.api_endpoint }}/ak/api/v1/kubernetes/components/peer"
    url_username: "{{ infrastructure.software.api_key }}"
    url_password: "{{ infrastructure.software.api_secret }}"
    method: POST
    body_format: json
    body: "{{ lookup('template', 'software/create-peer.json.j2') }}"
    validate_certs: no
  changed_when: True
  when: not ibp_peer_count

- name: Get the list of components
  uri:
    url: "{{ infrastructure.software.api_endpoint }}/ak/api/v1/components?skip_cache=yes"
    url_username: "{{ infrastructure.software.api_key }}"
    url_password: "{{ infrastructure.software.api_secret }}"
    method: GET
    return_content: yes
    validate_certs: no
  register: ibp_components

- name: Get peer
  set_fact:
    ibp_peer: "{{
      ibp_components.json |
      selectattr('display_name', 'defined') |
      selectattr('display_name', 'eq', peer.ibp.display_name) |
      first
    }}"

- name: Wait for peer to start
  uri:
    url: "{{ ibp_peer.operations_url }}/healthz"
    status_code: "200"
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 600
  delay: 1

- name: Update peer facts
  set_fact:
    ibp: "{{
      ibp |
      combine({
        peer.id: {
          'protocol': ibp_peer.api_url | urlsplit('scheme'),
          'hostname': ibp_peer.api_url | urlsplit('hostname'),
          'port': ibp_peer.api_url | urlsplit('port'),
          'pem': organization.wallet + '/tls-root.pem' if peer.tls.enabled else ''
        }
      }, recursive=True)
    }}"

- name: Create node JSON file
  copy:
    content: "{{ lookup('template', 'software/peer-node.json.j2') | to_nice_json }}"
    dest: "{{ organization.nodes }}/{{ peer.id }}.json"