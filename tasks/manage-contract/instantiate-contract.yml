#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Select member to use for instantiate operations
  set_fact:
    member: "{{ channel.endorsing_members[0] }}"

- name: Select peer to use for instantiate operations
  set_fact:
    peer: "{{ member.endorsing_peers[0] }}"

- name: Select orderer to use for instantiate operations
  set_fact:
    orderer: "{{ channel.orderer }}"

- name: Retrieve current instantiated contract list
  command: peer chaincode list --instantiated -C {{ channel.name }}
  environment:
      CORE_PEER_ADDRESS: "{{ ibp[peer.id].hostname }}:{{ ibp[peer.id].port }}"
      CORE_PEER_MSPCONFIGPATH: "{{ member.wallet }}/{{ member.msp.admin.identity }}"
      CORE_PEER_LOCALMSPID: "{{ member.msp.id }}"
      CORE_PEER_TLS_ENABLED: "{{ 'true' if peer.tls.enabled else 'false' }}"
      CORE_PEER_TLS_ROOTCERT_FILE: "{{ ibp[peer.id].pem if ibp[peer.id].pem is defined }}"
  register: chaincode_list
  failed_when: False

- name: Determine if channel has contract instantiated at correct version
  set_fact:
    contract_instantiated: "{{ chaincode_list.stdout | join('') is search('Name: ' ~ contract.name ~ ', Version: ' ~ contract.version ~ ',') }}"

- name: Determine if channel has contract instantiated at any version
  set_fact:
    contract_instantiated_anyversion: "{{ chaincode_list.stdout | join('') is search('Name: ' ~ contract.name ~ ',') }}"

- name: Instantiate contract on channel
  command: >
    peer chaincode instantiate
    -C {{channel.name}}
    -c '{"Args":[]}'
    -n {{ contract.name }}
    -v {{ contract.version }}
    -P {{ channel.endorsement_policy | quote }}
    -o {{ ibp[channel.orderer.id].hostname }}:{{ ibp[channel.orderer.id].port }}
    {{ '--tls' if ibp[channel.orderer.id].protocol == 'grpcs' else '' }}
    {{ '--cafile ' + ibp[channel.orderer.id].pem if ibp[channel.orderer.id].protocol == 'grpcs' else '' }}
    {{ '--ordererTLSHostnameOverride ' + ibp[channel.orderer.id].internal_hostname if ibp[channel.orderer.id].internal_hostname is defined else '' }}
  environment:
      CORE_PEER_ADDRESS: "{{ ibp[peer.id].hostname }}:{{ ibp[peer.id].port }}"
      CORE_PEER_MSPCONFIGPATH: "{{ member.wallet }}/{{ member.msp.admin.identity }}"
      CORE_PEER_LOCALMSPID: "{{ member.msp.id }}"
      CORE_PEER_TLS_ENABLED: "{{ 'true' if peer.tls.enabled else 'false' }}"
      CORE_PEER_TLS_ROOTCERT_FILE: "{{ ibp[peer.id].pem if ibp[peer.id].pem is defined }}"
  when: (not contract_instantiated) and (not contract_instantiated_anyversion)

- name: Upgrade contract on channel
  command: >
    peer chaincode upgrade
    -C {{channel.name}}
    -c '{"Args":[]}'
    -n {{ contract.name }}
    -v {{ contract.version }}
    -P {{ channel.endorsement_policy | quote }}
    -o {{ ibp[channel.orderer.id].hostname }}:{{ ibp[channel.orderer.id].port }}
    {{ '--tls' if ibp[channel.orderer.id].protocol == 'grpcs' else '' }}
    {{ '--cafile ' + ibp[channel.orderer.id].pem if ibp[channel.orderer.id].protocol == 'grpcs' else '' }}
    {{ '--ordererTLSHostnameOverride ' + ibp[channel.orderer.id].internal_hostname if ibp[channel.orderer.id].internal_hostname is defined else '' }}
  environment:
      CORE_PEER_ADDRESS: "{{ ibp[peer.id].hostname }}:{{ ibp[peer.id].port }}"
      CORE_PEER_MSPCONFIGPATH: "{{ member.wallet }}/{{ member.msp.admin.identity }}"
      CORE_PEER_LOCALMSPID: "{{ member.msp.id }}"
      CORE_PEER_TLS_ENABLED: "{{ 'true' if peer.tls.enabled else 'false' }}"
      CORE_PEER_TLS_ROOTCERT_FILE: "{{ ibp[peer.id].pem if ibp[peer.id].pem is defined }}"
  when: (not contract_instantiated) and contract_instantiated_anyversion
