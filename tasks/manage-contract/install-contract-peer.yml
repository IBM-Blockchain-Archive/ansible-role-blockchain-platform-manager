#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Retrieve current installed contract list
  command: peer chaincode list --installed
  environment:
      CORE_PEER_ADDRESS: "{{ ibp[peer.id].hostname }}:{{ ibp[peer.id].port }}"
      CORE_PEER_MSPCONFIGPATH: "{{ member.wallet }}/{{ member.msp.admin.identity }}"
      CORE_PEER_LOCALMSPID: "{{ member.msp.id }}"
      CORE_PEER_TLS_ENABLED: "{{ 'true' if peer.tls.enabled else 'false' }}"
      CORE_PEER_TLS_ROOTCERT_FILE: "{{ ibp[peer.id].pem if ibp[peer.id].pem is defined }}"
  register: chaincode_list
  failed_when: False

- name: Determine if peer has contract installed
  set_fact:
    contract_installed: "{{ chaincode_list.stdout | join('') is search('Name: ' ~ contract.name ~ ', Version: ' ~ contract.version ~ ',') }}"

- name: Install contract on peer
  command: peer chaincode install {{ contract.package }}
  environment:
      CORE_PEER_ADDRESS: "{{ ibp[peer.id].hostname }}:{{ ibp[peer.id].port }}"
      CORE_PEER_MSPCONFIGPATH: "{{ member.wallet }}/{{ member.msp.admin.identity }}"
      CORE_PEER_LOCALMSPID: "{{ member.msp.id }}"
      CORE_PEER_TLS_ENABLED: "{{ 'true' if peer.tls.enabled else 'false' }}"
      CORE_PEER_TLS_ROOTCERT_FILE: "{{ ibp[peer.id].pem if ibp[peer.id].pem is defined }}"
  when: not contract_installed